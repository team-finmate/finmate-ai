# core/config.py
from dotenv import load_dotenv
import os

# 환경 변수 로드
load_dotenv()

# OpenAI API 키
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# 1) 규칙 정의 -----------------------------------------------------------------
WEEKEND_DAYS = {5, 6}

WEEKDAY_BUCKETS = [
    ("07:00", "09:00", "출근길_아침"),
    ("09:00", "12:00", "오전_업무시간"),
    ("12:00", "14:00", "점심시간"),
    ("14:00", "18:00", "오후_업무시간"),
    ("18:00", "21:00", "저녁_퇴근후"),
    ("21:00", "24:00", "밤_휴식시간"),
    ("00:00", "07:00", "새벽_심야"),
]

WEEKEND_BUCKETS = [
    ("07:00", "10:00", "주말_아침"),
    ("10:00", "14:00", "주말_오전_활동"),
    ("14:00", "18:00", "주말_오후_활동"),
    ("18:00", "22:00", "주말_저녁"),
    ("22:00", "24:00", "주말_밤"),
    ("00:00", "07:00", "주말_새벽"),
]

# 금액 패턴 범위(원)을 새로운 카테고리에 맞게 조정
AMOUNT_HINTS = [
    ("카페/간식", 3000, 8000),
    ("식비", 8000, 20000),
    ("배달음식", 15000, 35000),
    ("편의점/마트/잡화", 2000, 15000),
    ("교통/자동차", 1000, 50000),
    ("취미/여가", 10000, 100000),
    ("술/유흥", 20000, 200000),
    ("온라인쇼핑", 10000, 150000),
    ("구독서비스", 5000, 50000),
    ("의료/건강", 10000, 100000),
]

# 상점/카테고리 키워드 → 라벨 힌트 (새로운 카테고리 태그 반영)
KEYWORD_HINTS = {
    # 배달/외식
    "배달의민족": "배달음식", "요기요": "배달음식", "배민": "배달음식",
    "쿠팡이츠": "배달음식", "위메프오": "배달음식",
    
    # 카페/간식
    "스타벅스": "카페/간식", "이디야": "카페/간식", "커피": "카페/간식",
    "투썸": "카페/간식", "빽다방": "카페/간식", "메가커피": "카페/간식",
    
    # 편의점/마트
    "편의점": "편의점/마트/잡화", "CU": "편의점/마트/잡화", 
    "GS25": "편의점/마트/잡화", "세븐일레븐": "편의점/마트/잡화",
    "이마트": "편의점/마트/잡화", "홈플러스": "편의점/마트/잡화", 
    "롯데마트": "편의점/마트/잡화", "다이소": "편의점/마트/잡화",
    
    # 온라인쇼핑
    "쿠팡": "온라인쇼핑", "11번가": "온라인쇼핑", "G마켓": "온라인쇼핑",
    "옥션": "온라인쇼핑", "위메프": "온라인쇼핑", "티몬": "온라인쇼핑",
    
    # 엔터테인먼트/여가
    "CGV": "취미/여가", "롯데시네마": "취미/여가", "메가박스": "취미/여가",
    "넷플릭스": "구독서비스", "유튜브": "구독서비스", "디즈니플러스": "구독서비스",
    "스포티파이": "구독서비스", "멜론": "구독서비스",
    
    # 교통
    "택시": "교통/자동차", "카카오택시": "교통/자동차", "우버": "교통/자동차",
    "주유": "교통/자동차", "지하철": "교통", "버스": "교통",
    
    # 기타
    "여행": "여행/숙박", "호텔": "여행/숙박", "에어비앤비": "여행/숙박",
    "피트니스": "의료/건강/피트니스", "헬스장": "의료/건강/피트니스",
    "병원": "의료/건강", "약국": "의료/건강", "치과": "의료/건강",
    "통신비": "주거/통신", "인터넷": "주거/통신", "전기료": "주거/통신",
    "학원": "교육", "온라인강의": "교육",
    "미용실": "미용", "네일": "미용", "마사지": "미용",
}

# 위험 패턴 감지 기준
RISK_PATTERNS = {
    "새벽_소비": ["새벽_심야", "주말_새벽"],  # 새벽 시간대 소비
    "고액_단건": 100000,  # 10만원 이상 단건 결제
    "반복_배달": {"category": "배달음식", "threshold": 3},  # 일정 기간 내 반복 배달
    "구독_과다": {"category": "구독서비스", "threshold": 5},  # 다수 구독 서비스
}

# 절약 제안 템플릿
SAVING_SUGGESTIONS_TEMPLATES = {
    "배달음식": "주 {count}회 배달 주문을 {reduce_count}회 줄이면 월 {amount:,}원 절약",
    "카페/간식": "하루 커피 한 잔 줄이면 월 {amount:,}원 절약",
    "구독서비스": "사용하지 않는 구독 {count}개 해지하면 월 {amount:,}원 절약",
    "택시": "대중교통 이용 시 월 {amount:,}원 절약 가능",
    "온라인쇼핑": "충동구매 방지로 월 {amount:,}원 절약 가능"
}

# OpenAI 모델 시스템 지시문
SYSTEM_INSTRUCTIONS = """
너는 개인의 결제내역을 분석하여 종합적인 소비 패턴 인사이트를 제공하는 금융 분석가다.

[분석 요구사항]
1) 전체 지출 집계 및 카테고리별 분석
2) 소비 패턴과 트렌드 분석 (시간대, 요일별 특성 고려)
3) 위험 패턴 및 과소비 영역 식별
4) 실용적인 절약 제안

[출력 형식(JSON만)]
{
  "total_spent": 0,
  "category_breakdown": {
    "카테고리명": {"amount": 0, "ratio": 0.0}
  },
  "spending_trend": "상승|하락|안정",
  "avg_transaction": 0,
  "top_expenses": [
    {"merchant": "상점명", "amount": 0, "category": "카테고리"}
  ],
  "spending_type": "소비 패턴 요약 (예: 외식·배달 중심, 주말 지출 집중)",
  "risk_patterns": ["위험 패턴 목록"],
  "overspending_categories": ["과소비 카테고리 목록"],
  "saving_suggestions": ["구체적인 절약 제안 목록"]
}

[분석 기준]
- category_breakdown: 'keyword_hints'와 'amount_hints'를 종합하여 주요 카테고리별 금액과 비율 계산
- spending_type: 'weekday_type', 'time_bucket' 정보를 활용한 소비 특성 요약
- risk_patterns: 새벽 시간대 소비, 고액 결제, 반복적 소비 패턴 등 식별
- overspending_categories: 평균 대비 과도한 지출 카테고리
- saving_suggestions: 실제 금액과 횟수를 포함한 구체적 절약 방안

[주의사항]
- 반드시 유효한 JSON만 출력
- 금액은 정수로 반올림
- 비율은 소수점 첫째 자리까지
- 구체적이고 실행 가능한 제안 작성
- 데이터가 부족한 경우 보수적으로 분석
"""
